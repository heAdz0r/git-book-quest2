#!/usr/bin/env node

const { execSync } = require("child_process");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");

// Path to the Git repository
const REPO_PATH = "../../flant-commercial-tutorial";
const ANSWERS_FILE = "../src/data/encryptedAnswers.js";

console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...");

// Function to execute git commands
function gitCommand(command, cwd = REPO_PATH) {
  try {
    const fullPath = path.resolve(__dirname, cwd);
    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${command} –≤ ${fullPath}`);
    return execSync(command, {
      cwd: fullPath,
      encoding: "utf8",
      shell: true,
    }).trim();
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${command}`);
    console.error(error.message);
    return null;
  }
}

// Function to normalize answer and create hash
function createAnswerHash(answer) {
  const normalized = answer.toLowerCase().trim().replace(/\s+/g, " ");
  return crypto.createHash("sha256").update(normalized).digest("hex");
}

// Function to create hash for both full and short Git hashes
function createGitHashAnswers(fullHash) {
  const shortHash = fullHash.substring(0, 7);
  return {
    full: createAnswerHash(fullHash),
    short: createAnswerHash(shortHash),
  };
}

// Get answers from Git repository
console.log("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...");

// Task 1: First commit hash
const firstCommitHash = gitCommand("git rev-list --max-parents=0 HEAD");
console.log(`‚úì –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç: ${firstCommitHash}`);

// Task 2: Keyword from technical solution (now FLANT_BEST)
const task2Answer = "FLANT_BEST";
console.log(`‚úì –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: ${task2Answer}`);

// Task 3: Review branch name
const reviewBranch = "review/tech-lead";
console.log(`‚úì –í–µ—Ç–∫–∞ –¥–ª—è —Ä–µ–≤—å—é: ${reviewBranch}`);

// Task 4: File in .gitignore
const gitignoreContent = gitCommand("cat .gitignore");
const gitignoreFile = gitignoreContent.split("\n")[0]; // First file
console.log(`‚úì –§–∞–π–ª –≤ .gitignore: ${gitignoreFile}`);

// Task 5: Original VAT rate (support both "18%" and "18")
const task5AnswerPercent = "18%";
const task5AnswerNumber = "18";
console.log(
  `‚úì –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ù–î–°: ${task5AnswerPercent} –∏–ª–∏ ${task5AnswerNumber}`
);

// Task 6: Command to see last commit changes (support both variants)
const task6Answer1 = "git show HEAD";
const task6Answer2 = "git diff HEAD~1 HEAD";
console.log(
  `‚úì –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${task6Answer1} –∏–ª–∏ ${task6Answer2}`
);

// Task 7: ACME commit hash
gitCommand("git checkout feature/special-offer-acme");
const acmeCommitHashFull = gitCommand('git log -1 --format="%H"');
const acmeCommitHashShort = gitCommand('git log -1 --format="%h"');
gitCommand("git checkout main");
console.log(`‚úì –ö–æ–º–º–∏—Ç ACME: ${acmeCommitHashFull} (${acmeCommitHashShort})`);

// Task 8: Final version tag
const finalTag = gitCommand("git tag");
console.log(`‚úì –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–≥: ${finalTag}`);

// Task 9: Number of commits in main
const commitCount = gitCommand("git rev-list --count main");
console.log(`‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤: ${commitCount}`);

// Create encrypted answers
console.log("\nüîê –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...");

const encryptedAnswers = {
  // Task 1: First commit hash (support both full and short)
  task1_full: createAnswerHash(firstCommitHash),
  task1_short: createAnswerHash(firstCommitHash.substring(0, 7)),

  // Task 2: Keyword
  task2: createAnswerHash(task2Answer),

  // Task 3: Review branch
  task3: createAnswerHash(reviewBranch),

  // Task 4: .gitignore file
  task4: createAnswerHash(gitignoreFile),

  // Task 5: VAT rate (support both "18%" and "18")
  task5_percent: createAnswerHash(task5AnswerPercent),
  task5_number: createAnswerHash(task5AnswerNumber),

  // Task 6: Git command (support both variants)
  task6_show: createAnswerHash(task6Answer1),
  task6_diff: createAnswerHash(task6Answer2),

  // Task 7: ACME commit hash (support both full and short)
  task7_full: createAnswerHash(acmeCommitHashFull),
  task7_short: createAnswerHash(acmeCommitHashShort),

  // Task 8: Final tag
  task8: createAnswerHash(finalTag),

  // Task 9: Commit count
  task9: createAnswerHash(commitCount),
};

// Generate the new encryptedAnswers.js file content
const fileContent = `// –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–µ—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º update-answers.js
// –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toISOString()}

window.encryptedAnswers = {
  // task1: —Ö–µ—à –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ (${firstCommitHash})
  task1_full: "${encryptedAnswers.task1_full}",
  task1_short: "${encryptedAnswers.task1_short}",

  // task2: –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "${task2Answer}"
  task2: "${encryptedAnswers.task2}",

  // task3: –≤–µ—Ç–∫–∞ –¥–ª—è —Ä–µ–≤—å—é "${reviewBranch}"
  task3: "${encryptedAnswers.task3}",

  // task4: —Ñ–∞–π–ª –≤ .gitignore "${gitignoreFile}"
  task4: "${encryptedAnswers.task4}",

  // task5: –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ù–î–° "${task5AnswerPercent}" –∏–ª–∏ "${task5AnswerNumber}"
  task5_percent: "${encryptedAnswers.task5_percent}",
  task5_number: "${encryptedAnswers.task5_number}",

  // task6: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π "${task6Answer1}" –∏–ª–∏ "${task6Answer2}"
  task6_show: "${encryptedAnswers.task6_show}",
  task6_diff: "${encryptedAnswers.task6_diff}",

  // task7: –∫–æ–º–º–∏—Ç ACME (${acmeCommitHashFull} / ${acmeCommitHashShort})
  task7_full: "${encryptedAnswers.task7_full}",
  task7_short: "${encryptedAnswers.task7_short}",

  // task8: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–≥ "${finalTag}"
  task8: "${encryptedAnswers.task8}",

  // task9: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ "${commitCount}"
  task9: "${encryptedAnswers.task9}"
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ answerValidator.js)
const normalizeInput = (input) => {
  if (typeof input !== "string") {
    return "";
  }

  return input
    .toLowerCase() // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    .trim() // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .replace(/\\s+/g, " "); // –ó–∞–º–µ–Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
window.generateAnswerHash = (answer) => {
  const normalized = normalizeInput(answer);
  return CryptoJS.SHA256(normalized).toString();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–µ—à–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ ID –∑–∞–¥–∞—á–∏
window.getAnswerHash = (taskId) => {
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –ø–æ–ª–Ω—ã—Ö, —Ç–∞–∫ –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö —Ö–µ—à–µ–π –¥–ª—è –∑–∞–¥–∞—á 1 –∏ 7
  if (taskId === 1 || taskId === 7) {
    return {
      full: window.encryptedAnswers[\`task\${taskId}_full\`],
      short: window.encryptedAnswers[\`task\${taskId}_short\`]
    };
  }
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ —á–∏—Å–µ–ª –¥–ª—è –∑–∞–¥–∞—á–∏ 5
  if (taskId === 5) {
    return {
      percent: window.encryptedAnswers[\`task\${taskId}_percent\`],
      number: window.encryptedAnswers[\`task\${taskId}_number\`]
    };
  }
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–¥–∞—á–∏ 6
  if (taskId === 6) {
    return {
      show: window.encryptedAnswers[\`task\${taskId}_show\`],
      diff: window.encryptedAnswers[\`task\${taskId}_diff\`]
    };
  }
  return window.encryptedAnswers[\`task\${taskId}\`];
};
`;

// Write the updated file
const answersFilePath = path.resolve(__dirname, ANSWERS_FILE);
fs.writeFileSync(answersFilePath, fileContent, "utf8");

console.log("\n‚úÖ –§–∞–π–ª encryptedAnswers.js —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
console.log(`üìÅ –ü—É—Ç—å: ${answersFilePath}`);

// Display summary
console.log("\nüìä –°–≤–æ–¥–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:");
console.log(
  `1. –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç: ${firstCommitHash} (${firstCommitHash.substring(0, 7)})`
);
console.log(`2. –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: ${task2Answer}`);
console.log(`3. –í–µ—Ç–∫–∞ —Ä–µ–≤—å—é: ${reviewBranch}`);
console.log(`4. –§–∞–π–ª .gitignore: ${gitignoreFile}`);
console.log(`5. –°—Ç–∞–≤–∫–∞ –ù–î–°: ${task5AnswerPercent} –∏–ª–∏ ${task5AnswerNumber}`);
console.log(`6. Git –∫–æ–º–∞–Ω–¥–∞: ${task6Answer1} –∏–ª–∏ ${task6Answer2}`);
console.log(`7. ACME –∫–æ–º–º–∏—Ç: ${acmeCommitHashFull} (${acmeCommitHashShort})`);
console.log(`8. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–≥: ${finalTag}`);
console.log(`9. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤: ${commitCount}`);
